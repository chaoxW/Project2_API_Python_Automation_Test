API Project Test Plan with UI flow (assume the UI flow which means we use power automate)

UI flow example (power automate)

Acceptance criteria example
I want to search the team from the page

	Test Case
	1, Ctreate a flow from power automate
		* Use "When a HTTP request is receoved" with GET
		* Use "Response" with status code 200 and body with "Hello World"
		* Save the flow then from  "When a HTTP request is receoved" get the url to call for example "https://www.hudl.com//api/opponents?page=1"
	2, Use post man and paste the url "https://www.hudl.com//api/opponents?page=1" send
		* we can get 200 and "Hello World" from the body
	3, We can add "&team=Milan", and send "https://www.hudl.com//api/opponents?page=1&team=Milan"
		* we can get "Milan" from the headers
	4, Add action into the flow between "When a HTTP request is receoved" and "Response" with "Compose" (as a debugging tool, use expression "triggerOutput"), and save
	5, Go back to post man and resend "https://www.hudl.com//api/opponents?page=1&team=Milan"
	6, Check the last call from my flow, check what the query returns, from "Outputs" we can find the element "queries"{"Team":"Milan"}
	7, Go back to the flow update the "Compose" expression with "triggerOutput().queries.Team", and save the flow
	8, Go back to post man and resend "https://www.hudl.com//api/opponents?page=1&team=Milan"
	9, Check the last call from my flow
		* we get "Outputs":"Milan"
	10, Rename the "Compose" with "Team", and add action "Get items" from share point, set the list name as "Teams", set the Filter Query as "Team eq Outputs"
	11, Create an initialize variable name as "Teams" as Array, and save
	12, Add action "Apply to each" select an output from previous steps with "value",and save
	13, Update "Response" body with "Teams", and save
	14, Go back to post man and resend "https://www.hudl.com//api/opponents?page=1&team=Milan"
		* we get ["Inter", "AC Milan"]
	15, Go back to post man and resend "https://www.hudl.com//api/opponents?page=1&team=Turin"
		* we get ["Juventus"]

*****************************************************************************************************************************

Questions:
1, I read this requirment "how the UI interacts with a service API" from project 2
I am not so sure about thie requirement, is it API tests with UI flow such as power automate, or you mean the UX deasign?

2, Any possibility to test the api but missing required functionality?

3, Any security testing? performance test? stress test?

*****************************************************************************************************************************

Automation tests with pytest

* The follwing test cases I have used the open api to make some automation tests as similar requests as the project
* I use pytest to make the automation tests for the demo in Git  

Acceptance criteria
1, I can login with the api /api/login
2, I can get the opponent list with the api /api/opponents?page=1
3, I can update the opponent with the api /api/opponents/2
4, I can create the opponent with the api /api/opponents
5, I can not create the opponent with the api /api/opponents/token
6, I can delete the opponent with the api /api/opponents/2

For each acceptance criteria there are test cases following

1, I can login with the api /api/login
POST login successful
/api/login

	Test Cases

		1, test_login_sucessful()
			1. prepare the json file with data
				{
    				"email": "shuai.wang@gmail.com",
    				"password": "Vg#y7SYZ5A&CFn!"
				}
			2. make the request POST with the api
			3. verify the status code (200) from the response
			4. verify token in the response
		
		2, test_login_unsucessful_missing_pass()
			1. prepare the json file with data
				{
    				"email": "shuai.wang@gmail.com"
				}
			2. make the request POST with the api
			3. verify the status code (400) from the response
			4. verify error in the response
				{
    				"error": "Missing password"
				}

		3, test_login_unsucessful_wrong_pass()
			1. prepare the json file with data
				{
    				"email": "shuai.wang@gmail.com",
    				"password": "Vg#y7SYZ5A"
				}
			2. make the request POST with the api
			3. verify the status code (401) from the response
			4. verify error in the response
				{
    				"error": "Wrong password"
				}

2, I can get the opponent list with the api /api/opponents?page=1

GET list of opponents
/api/opponents?page=1

	Test Cases

		1, test_get_opponent_status_code()
			1. make the request GET with the api
			2. verify the status code (200) from the response
		
		2, test_get_opponent_data()
			1. make the request GET with the api
			2. parse the response with json
			3. fetch the sqlId
			4. validate the sqlId()

GET opponent not found
/api/opponents/23

	Test Case

		1, test_get_opponent_not_found()
			1. make the request GET with the api
			2. verify the status code (404) from the response

3, I can update the opponent with the api /api/opponents/2

PUT update opponent
/api/opponents/2

	Test Cases

		1, test_update_opponent_status_code()
			1. prepare the json file with updated data
				{
   					"gameId":"1234567 updated",
   					"sqlId":"1234567 updated",
   					"date":"2016-01-01T19:00:00",
   					"opponent":"TestOpponent updated",
   					"opponentId":"123456",
   					"isHome":true,
   					"gameType":0,
   					"categories":[

   					]
				}
			2. verify the status code (200) from the response

		2, test_update_opponent_data()
			1. prepare the json file with updated data
				{
   					"gameId":"1234567 updated",
   					"sqlId":"1234567 updated",
   					"date":"2016-01-01T19:00:00",
   					"opponent":"TestOpponent updated",
   					"opponentId":"123456",
   					"isHome":true,
   					"gameType":0,
   					"categories":[

   					]
				}
			2. parse the response with json
			3. fetch the opponent from json
			4. validate the opponent with "TestOpponent updated"

4, I can create the opponent with the api /api/opponents

POST create new opponent
/api/opponents

	Test Cases

		1, test_create_new_opponent_status_code()
			1. prepare the json file with data
				{
   					"gameId":"1234567",
   					"sqlId":"1234567",
   					"date":"2016-01-01T19:00:00",
   					"opponent":"TestOpponent",
   					"opponentId":"123456",
   					"isHome":true,
   					"gameType":0,
   					"categories":[

   					]
				}
			2. make the request POST with the api
			3. verify the status code (201) from the response
		
		2, test_create_new_opponent_fetch_id()
			1. prepare the json file with data
				{
   					"gameId":"1234567",
   					"sqlId":"1234567",
   					"date":"2016-01-01T19:00:00",
   					"opponent":"TestOpponent",
   					"opponentId":"123456",
   					"isHome":true,
   					"gameType":0,
   					"categories":[

   					]
				}
			2. make the request POST with the api
			3. parse the response with json
			4. fetch sqlId from json
			5. validate the sqlId

5, I can not create the opponent with the api /api/opponents/invalid_token

POST create new opponent with invalid token
/api/opponents/token

	Test Cases

		1, test_create_new_opponent_with_token_failed()
			1. prepare the json file with data
				{
    				"email": "shuai.wang@gmail.com",
    				"password": "Vg#y7SYZ5A&CFn!"
				}
			2. make the request POST with the api
			3. verify the status code (200) from the response
			4. get token in the response
			5. make the request POST with the invalid token
				{
   					"gameId":"1234567",
   					"sqlId":"1234567",
   					"date":"2016-01-01T19:00:00",
   					"opponent":"TestOpponent",
   					"opponentId":"123456",
   					"isHome":true,
   					"gameType":0,
   					"categories":[

   					]
				}		
			6. verify the status code (403) from the response

6, I can delete the opponent with the api /api/opponents/2

DELETE delete opponent
/api/opponents/2

	Test Cases

		1, test_delete_opponent()
			1. make the request DELETE with the api
			2. verify the status code (204) from the response
			3. make the request GET with the api
			4. verify the status code (404) from the response

7, internal server error 500

mock with api/mock.codes/500
	
	Test Case
		1, test_mock_500
			1. make the request GET with the api
			2. verify the status code (500) from the response

		

