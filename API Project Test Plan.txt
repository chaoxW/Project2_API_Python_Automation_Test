API Project Test Plan
* I have used the open api to make some automation tests as similar requests as the project 

Acceptance criteria
1, I can login with the api /api/login
2, I can get the opponent list with the api /api/opponents?page=1
3, I can update the opponent with the api /api/opponents/2
4, I can create the opponent with the api /api/opponents
5, I can not create the opponent with the api /api/opponents/token
6, I can delete the opponent with the api /api/opponents/2

For each acceptance criteria there are test cases following

1, I can login with the api /api/login
POST login successful
/api/login

	Test Cases

		1, test_login_sucessful()
			1. prepare the json file with data
				{
    				"email": "shuai.wang@gmail.com",
    				"password": "Vg#y7SYZ5A&CFn!"
				}
			2. make the request POST with the api
			3. verify the status code (200) from the response
			4. verify token in the response
		
		2, test_login_unsucessful_missing_pass()
			1. prepare the json file with data
				{
    				"email": "shuai.wang@gmail.com"
				}
			2. make the request POST with the api
			3. verify the status code (400) from the response
			4. verify error in the response
				{
    				"error": "Missing password"
				}

		3, test_login_unsucessful_wrong_pass()
			1. prepare the json file with data
				{
    				"email": "shuai.wang@gmail.com",
    				"password": "Vg#y7SYZ5A"
				}
			2. make the request POST with the api
			3. verify the status code (401) from the response
			4. verify error in the response
				{
    				"error": "Wrong password"
				}

2, I can get the opponent list with the api /api/opponents?page=1

GET list of opponents
/api/opponents?page=1

	Test Cases

		1, test_get_opponent_status_code()
			1. make the request GET with the api
			2. verify the status code (200) from the response
		
		2, test_get_opponent_data()
			1. make the request GET with the api
			2. parse the response with json
			3. fetch the sqlId
			4. validate the sqlId()

GET opponent not found
/api/opponents/23

	Test Case

		1, test_get_opponent_not_found()
			1. make the request GET with the api
			2. verify the status code (404) from the response

3, I can update the opponent with the api /api/opponents/2

PUT update opponent
/api/opponents/2

	Test Cases

		1, test_update_opponent_status_code()
			1. prepare the json file with updated data
				{
   					"gameId":"1234567 updated",
   					"sqlId":"1234567 updated",
   					"date":"2016-01-01T19:00:00",
   					"opponent":"TestOpponent updated",
   					"opponentId":"123456",
   					"isHome":true,
   					"gameType":0,
   					"categories":[

   					]
				}
			2. verify the status code (200) from the response

		2, test_update_opponent_data()
			1. prepare the json file with updated data
				{
   					"gameId":"1234567 updated",
   					"sqlId":"1234567 updated",
   					"date":"2016-01-01T19:00:00",
   					"opponent":"TestOpponent updated",
   					"opponentId":"123456",
   					"isHome":true,
   					"gameType":0,
   					"categories":[

   					]
				}
			2. parse the response with json
			3. fetch the opponent from json
			4. validate the opponent with "TestOpponent updated"

4, I can create the opponent with the api /api/opponents

POST create new opponent
/api/opponents

	Test Cases

		1, test_create_new_opponent_status_code()
			1. prepare the json file with data
				{
   					"gameId":"1234567",
   					"sqlId":"1234567",
   					"date":"2016-01-01T19:00:00",
   					"opponent":"TestOpponent",
   					"opponentId":"123456",
   					"isHome":true,
   					"gameType":0,
   					"categories":[

   					]
				}
			2. make the request POST with the api
			3. verify the status code (201) from the response
		
		2, test_create_new_opponent_fetch_id()
			1. prepare the json file with data
				{
   					"gameId":"1234567",
   					"sqlId":"1234567",
   					"date":"2016-01-01T19:00:00",
   					"opponent":"TestOpponent",
   					"opponentId":"123456",
   					"isHome":true,
   					"gameType":0,
   					"categories":[

   					]
				}
			2. make the request POST with the api
			3. parse the response with json
			4. fetch sqlId from json
			5. validate the sqlId

5, I can not create the opponent with the api /api/opponents/token

POST create new opponent with token
/api/opponents/token

	Test Cases

		1, test_create_new_opponent_with_token_failed()
			1. prepare the json file with data
				{
    				"email": "shuai.wang@gmail.com",
    				"password": "Vg#y7SYZ5A&CFn!"
				}
			2. make the request POST with the api
			3. verify the status code (200) from the response
			4. get token in the response
			5. make the request POST with the token
				{
   					"gameId":"1234567",
   					"sqlId":"1234567",
   					"date":"2016-01-01T19:00:00",
   					"opponent":"TestOpponent",
   					"opponentId":"123456",
   					"isHome":true,
   					"gameType":0,
   					"categories":[

   					]
				}		
			6. verify the status code (403) from the response


6, I can delete the opponent with the api /api/opponents/2

DELETE delete opponent
/api/opponents/2

	Test Cases

		1, test_delete_opponent()
			1. make the request DELETE with the api
			2. verify the status code (204) from the response
			3. make the request GET with the api
			4. verify the status code (404) from the response
		

